# LeetCode #11: Container With Most Water (Medium)
# Problem: Given n non-negative integers representing heights,
# find the container that holds the most water (maximum area)

# Function to find the maximum area container
(def max_water (heights)
    # Initialize variables
    (let size (len heights))
    (let res 0)
    (let left 0)
    (let right (- size 1))
    
    # Two-pointer approach
    (while (< left right)
        # Get heights at current positions
        (let left_height (id left heights))
        (let right_height (id right heights))
        
        # Calculate width and min height
        (let width (- right left))
        (let min_height (if (< left_height right_height) left_height : right_height))
        
        # Calculate area and update res if larger
        (let area (* width min_height))
        (if (> area res)
            (set res area)
        )
        
        # Move pointers - we move the pointer with smaller height
        (if (< left_height right_height)
            (+= left 1)
            (else (-= right 1))
        )
    )
    
    (return res)
)

# Test case 1: [1,8,6,2,5,4,8,3,7]
# Expected output: 56 (between heights 8 and 7)
(let heights1 (list 1 8 6 2 5 4 8 3 7))
(println "Test Case 1:")
(println heights1)
(println (max_water heights1))

# Test case 2: [1,1]
# Expected output: 1
(let heights2 (list 1 1))
(println "Test Case 2:")
(println heights2)
(println (max_water heights2))

# Test case 3: [4,3,2,1,4]
# Expected output: 16
(let heights3 (list 4 3 2 1 4))
(println "Test Case 3:")
(println heights3)
(println (max_water heights3))

# Test case 4: [1,2,1]
# Expected output: 2
(let heights4 (list 1 2 1))
(println "Test Case 4:")
(println heights4)
(println (max_water heights4)) 