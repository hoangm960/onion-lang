# AST for binary_search_test.onion

program:
 statement:
  statementType:
   functionDef:
    def:
    binary_search:
    lst:
     low:
     high:
     target
    block:
     statement:
      statementType:
       ifStmt:
        if:
        expression:
         compoundExpr:
          booleanExpr:
           >:
           expression:
            low
           expression:
            high
        block:
         statement:
          statementType:
           returnStmt:
            return:
            expression:
             literal:
              -1
        else:
         block:
          statement:
           statementType:
            assignment:
             let:
             mid:
             expression:
              compoundExpr:
               arithmeticExpr:
                //:
                expression:
                 compoundExpr:
                  arithmeticExpr:
                   +:
                   expression:
                    low
                   expression:
                    high
                expression:
                 literal:
                  2
          statement:
           statementType:
            assignment:
             let:
             mid_value:
             expression:
              compoundExpr:
               listOpExpr:
                getid:
                expression:
                 mid
                expression:
                 lst
          statement:
           statementType:
            ifStmt:
             if:
             expression:
              compoundExpr:
               booleanExpr:
                ==:
                expression:
                 mid_value
                expression:
                 target
             block:
              statement:
               statementType:
                returnStmt:
                 return:
                 expression:
                  mid
             else:
              block:
               statement:
                statementType:
                 ifStmt:
                  if:
                  expression:
                   compoundExpr:
                    booleanExpr:
                     <:
                     expression:
                      target
                     expression:
                      mid_value
                  block:
                   statement:
                    statementType:
                     returnStmt:
                      return:
                      expression:
                       compoundExpr:
                        callExpr:
                         binary_search:
                         expression:
                          lst
                         expression:
                          low
                         expression:
                          compoundExpr:
                           arithmeticExpr:
                            -:
                            expression:
                             mid
                            expression:
                             literal:
                              1
                         expression:
                          target
                  else:
                   block:
                    statement:
                     statementType:
                      returnStmt:
                       return:
                       expression:
                        compoundExpr:
                         callExpr:
                          binary_search:
                          expression:
                           lst
                          expression:
                           compoundExpr:
                            arithmeticExpr:
                             +:
                             expression:
                              mid
                             expression:
                              literal:
                               1
                          expression:
                           high
                          expression:
                           target
 statement:
  statementType:
   functionDef:
    def:
    search:
    lst:
     target
    block:
     statement:
      statementType:
       assignment:
        let:
        size:
        expression:
         compoundExpr:
          listOpExpr:
           sizeof:
           expression:
            lst
     statement:
      statementType:
       ifStmt:
        if:
        expression:
         compoundExpr:
          booleanExpr:
           ==:
           expression:
            size
           expression:
            literal:
             0
        block:
         statement:
          statementType:
           returnStmt:
            return:
            expression:
             literal:
              -1
        else:
         block:
          statement:
           statementType:
            returnStmt:
             return:
             expression:
              compoundExpr:
               callExpr:
                binary_search:
                expression:
                 lst
                expression:
                 literal:
                  0
                expression:
                 compoundExpr:
                  arithmeticExpr:
                   -:
                   expression:
                    size
                   expression:
                    literal:
                     1
                expression:
                 target
 statement:
  statementType:
   assignment:
    let:
    sorted_list:
    expression:
     compoundExpr:
      listExpr:
       list:
       expression:
        literal:
         1
       expression:
        literal:
         3
       expression:
        literal:
         5
       expression:
        literal:
         7
       expression:
        literal:
         9
       expression:
        literal:
         11
       expression:
        literal:
         13
       expression:
        literal:
         15
       expression:
        literal:
         17
       expression:
        literal:
         19
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      listExpr:
       list:
       expression:
        literal:
         1
       expression:
        literal:
         3
       expression:
        literal:
         5
       expression:
        literal:
         7
       expression:
        literal:
         9
       expression:
        literal:
         11
       expression:
        literal:
         13
       expression:
        literal:
         15
       expression:
        literal:
         17
       expression:
        literal:
         19
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      callExpr:
       search:
       expression:
        sorted_list
       expression:
        literal:
         1
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      callExpr:
       search:
       expression:
        sorted_list
       expression:
        literal:
         11
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      callExpr:
       search:
       expression:
        sorted_list
       expression:
        literal:
         19
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      callExpr:
       search:
       expression:
        sorted_list
       expression:
        literal:
         0
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      callExpr:
       search:
       expression:
        sorted_list
       expression:
        literal:
         6
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      callExpr:
       search:
       expression:
        sorted_list
       expression:
        literal:
         20
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      callExpr:
       search:
       expression:
        compoundExpr:
         listExpr:
          list
       expression:
        literal:
         5
 statement:
  statementType:
   assignment:
    let:
    primes:
    expression:
     compoundExpr:
      listExpr:
       list:
       expression:
        literal:
         2
       expression:
        literal:
         3
       expression:
        literal:
         5
       expression:
        literal:
         7
       expression:
        literal:
         11
       expression:
        literal:
         13
       expression:
        literal:
         17
       expression:
        literal:
         19
       expression:
        literal:
         23
       expression:
        literal:
         29
       expression:
        literal:
         31
       expression:
        literal:
         37
       expression:
        literal:
         41
       expression:
        literal:
         43
       expression:
        literal:
         47
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      callExpr:
       search:
       expression:
        primes
       expression:
        literal:
         17
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      callExpr:
       search:
       expression:
        primes
       expression:
        literal:
         42
 statement:
  statementType:
   assignment:
    let:
    indices:
    expression:
     compoundExpr:
      listExpr:
       list:
       expression:
        literal:
         0
       expression:
        literal:
         2
       expression:
        literal:
         4
       expression:
        literal:
         6
       expression:
        literal:
         8
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      callExpr:
       search:
       expression:
        indices
       expression:
        compoundExpr:
         callExpr:
          search:
          expression:
           sorted_list
          expression:
           literal:
            9
 <EOF>
