# AST for leetcode2.onion

program:
 statement:
  statementType:
   functionDef:
    def:
    combinationSum:
    candidates:
     target
    block:
     statement:
      statementType:
       assignment:
        let:
        result:
        expression:
         compoundExpr:
          listExpr:
           list
     statement:
      statementType:
       assignment:
        let:
        current:
        expression:
         compoundExpr:
          listExpr:
           list
     statement:
      statementType:
       functionDef:
        def:
        backtrack:
        start:
         target
        block:
         statement:
          statementType:
           ifExpr:
            if:
            expression:
             compoundExpr:
              booleanExpr:
               ==:
               expression:
                target
               expression:
                literal:
                 0
            statement:
             <missing:
             ':
             '>:
              statementType:
               expression:
                Found
              a:
              combination:
              append:
              a:
              COPY:
              of:
              current:
              to:
              result
           <missing:
           '
          '>
          statement:
           statementType:
            appendStmt:
             append:
             result:
             expression:
              compoundExpr:
               callExpr:
                copy:
                expression:
                 current
       Assumes:
       a:
       copy:
       function:
       exists:
       No:
       return:
       needed:
       here:
       just:
       proceed:
       after:
       adding:
       the:
       combination
      statement:
       statementType:
        <missing:
        '
       '>
      statement:
       statementType:
        else
       <missing:
       '
       '>
      statement:
       statementType:
        ifExpr:
         if:
         expression:
          compoundExpr:
           booleanExpr:
            >:
            expression:
             target
            expression:
             literal:
              0
         statement:
          statementType:
           loopStatement:
            loop:
            i:
            start
          <missing:
          '
          '>
       <missing:
       '
       '>
      statement:
       statementType:
        sizeof:
        expression:
         candidates
      statement:
       statementType:
        appendStmt:
         append:
         current:
         expression:
          compoundExpr:
           listOpExpr:
            getid:
            expression:
             i
            expression:
             candidates
      statement:
       statementType:
        expression:
         backtrack
       i
       statement:
        statementType:
         -:
         expression:
          target
        <missing:
        '
        '>
       statement:
        statementType:
         getid:
         expression:
          i
        candidates
  statement:
   statementType:
    assignment:
     let:
     current:
     expression:
      compoundExpr:
       listOpExpr:
        tail:
        expression:
         current
