# AST for list_op.onion

program:
 statement:
  statementType:
   functionDef:
    def:
    make_list:
    block:
     statement:
      statementType:
       returnStmt:
        return:
        expression:
         compoundExpr:
          listExpr:
           list:
           expression:
            literal:
             1
           expression:
            literal:
             2
           expression:
            literal:
             3
 statement:
  statementType:
   assignment:
    let:
    a:
    expression:
     compoundExpr:
      listExpr:
       list:
       expression:
        literal:
         10
       expression:
        literal:
         20
       expression:
        literal:
         30
 statement:
  statementType:
   assignment:
    let:
    b:
    expression:
     compoundExpr:
      listExpr:
       list:
       expression:
        literal:
         40
       expression:
        literal:
         50
       expression:
        literal:
         60
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      listOpExpr:
       head:
       expression:
        a
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      listOpExpr:
       head:
       expression:
        compoundExpr:
         callExpr:
          make_list
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      listOpExpr:
       tail:
       expression:
        a
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      listOpExpr:
       getid:
       expression:
        compoundExpr:
         arithmeticExpr:
          +:
          expression:
           literal:
            1
          expression:
           literal:
            0
       expression:
        a
 statement:
  statementType:
   assignment:
    let:
    nested:
    expression:
     compoundExpr:
      listExpr:
       list:
       expression:
        a
       expression:
        b
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      listOpExpr:
       head:
       expression:
        nested
 statement:
  statementType:
   assignment:
    let:
    inner:
    expression:
     compoundExpr:
      listOpExpr:
       getid:
       expression:
        literal:
         1
       expression:
        nested
 statement:
  statementType:
   printStatement:
    print:
    expression:
     compoundExpr:
      listOpExpr:
       head:
       expression:
        inner
 <EOF>
