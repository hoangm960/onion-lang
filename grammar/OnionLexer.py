# Generated from Onion.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,204,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,1,1,1,
        1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,
        1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,
        1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,24,1,24,5,24,143,8,24,10,24,12,24,146,9,24,
        1,25,4,25,149,8,25,11,25,12,25,150,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,3,26,162,8,26,1,27,1,27,5,27,166,8,27,10,27,12,27,
        169,9,27,1,27,1,27,1,28,4,28,174,8,28,11,28,12,28,175,1,28,1,28,
        1,29,1,29,1,29,1,29,5,29,184,8,29,10,29,12,29,187,9,29,1,29,1,29,
        1,29,1,29,1,29,1,30,1,30,1,30,1,30,5,30,198,8,30,10,30,12,30,201,
        9,30,1,30,1,30,1,185,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
        48,57,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,2,0,10,10,13,13,
        210,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,1,63,1,0,0,0,3,65,1,0,0,0,5,69,1,0,0,0,7,71,1,0,0,0,
        9,73,1,0,0,0,11,75,1,0,0,0,13,77,1,0,0,0,15,79,1,0,0,0,17,82,1,0,
        0,0,19,85,1,0,0,0,21,87,1,0,0,0,23,89,1,0,0,0,25,92,1,0,0,0,27,95,
        1,0,0,0,29,99,1,0,0,0,31,101,1,0,0,0,33,103,1,0,0,0,35,105,1,0,0,
        0,37,108,1,0,0,0,39,113,1,0,0,0,41,118,1,0,0,0,43,124,1,0,0,0,45,
        130,1,0,0,0,47,136,1,0,0,0,49,140,1,0,0,0,51,148,1,0,0,0,53,161,
        1,0,0,0,55,163,1,0,0,0,57,173,1,0,0,0,59,179,1,0,0,0,61,193,1,0,
        0,0,63,64,5,40,0,0,64,2,1,0,0,0,65,66,5,108,0,0,66,67,5,101,0,0,
        67,68,5,116,0,0,68,4,1,0,0,0,69,70,5,41,0,0,70,6,1,0,0,0,71,72,5,
        43,0,0,72,8,1,0,0,0,73,74,5,45,0,0,74,10,1,0,0,0,75,76,5,42,0,0,
        76,12,1,0,0,0,77,78,5,47,0,0,78,14,1,0,0,0,79,80,5,61,0,0,80,81,
        5,61,0,0,81,16,1,0,0,0,82,83,5,33,0,0,83,84,5,61,0,0,84,18,1,0,0,
        0,85,86,5,60,0,0,86,20,1,0,0,0,87,88,5,62,0,0,88,22,1,0,0,0,89,90,
        5,60,0,0,90,91,5,61,0,0,91,24,1,0,0,0,92,93,5,62,0,0,93,94,5,61,
        0,0,94,26,1,0,0,0,95,96,5,110,0,0,96,97,5,111,0,0,97,98,5,116,0,
        0,98,28,1,0,0,0,99,100,5,91,0,0,100,30,1,0,0,0,101,102,5,44,0,0,
        102,32,1,0,0,0,103,104,5,93,0,0,104,34,1,0,0,0,105,106,5,105,0,0,
        106,107,5,102,0,0,107,36,1,0,0,0,108,109,5,116,0,0,109,110,5,104,
        0,0,110,111,5,101,0,0,111,112,5,110,0,0,112,38,1,0,0,0,113,114,5,
        101,0,0,114,115,5,108,0,0,115,116,5,115,0,0,116,117,5,101,0,0,117,
        40,1,0,0,0,118,119,5,112,0,0,119,120,5,114,0,0,120,121,5,105,0,0,
        121,122,5,110,0,0,122,123,5,116,0,0,123,42,1,0,0,0,124,125,5,109,
        0,0,125,126,5,97,0,0,126,127,5,99,0,0,127,128,5,114,0,0,128,129,
        5,111,0,0,129,44,1,0,0,0,130,131,5,99,0,0,131,132,5,108,0,0,132,
        133,5,97,0,0,133,134,5,115,0,0,134,135,5,115,0,0,135,46,1,0,0,0,
        136,137,5,100,0,0,137,138,5,101,0,0,138,139,5,102,0,0,139,48,1,0,
        0,0,140,144,7,0,0,0,141,143,7,1,0,0,142,141,1,0,0,0,143,146,1,0,
        0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,50,1,0,0,0,146,144,1,0,0,
        0,147,149,7,2,0,0,148,147,1,0,0,0,149,150,1,0,0,0,150,148,1,0,0,
        0,150,151,1,0,0,0,151,52,1,0,0,0,152,153,5,116,0,0,153,154,5,114,
        0,0,154,155,5,117,0,0,155,162,5,101,0,0,156,157,5,102,0,0,157,158,
        5,97,0,0,158,159,5,108,0,0,159,160,5,115,0,0,160,162,5,101,0,0,161,
        152,1,0,0,0,161,156,1,0,0,0,162,54,1,0,0,0,163,167,5,34,0,0,164,
        166,8,3,0,0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,
        168,1,0,0,0,168,170,1,0,0,0,169,167,1,0,0,0,170,171,5,34,0,0,171,
        56,1,0,0,0,172,174,7,4,0,0,173,172,1,0,0,0,174,175,1,0,0,0,175,173,
        1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,178,6,28,0,0,178,58,
        1,0,0,0,179,180,5,47,0,0,180,181,5,42,0,0,181,185,1,0,0,0,182,184,
        9,0,0,0,183,182,1,0,0,0,184,187,1,0,0,0,185,186,1,0,0,0,185,183,
        1,0,0,0,186,188,1,0,0,0,187,185,1,0,0,0,188,189,5,42,0,0,189,190,
        5,47,0,0,190,191,1,0,0,0,191,192,6,29,0,0,192,60,1,0,0,0,193,194,
        5,47,0,0,194,195,5,47,0,0,195,199,1,0,0,0,196,198,8,5,0,0,197,196,
        1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,202,
        1,0,0,0,201,199,1,0,0,0,202,203,6,30,0,0,203,62,1,0,0,0,8,0,144,
        150,161,167,175,185,199,1,6,0,0
    ]

class OnionLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    IDENTIFIER = 25
    INT = 26
    BOOL = 27
    STRING = 28
    WS = 29
    COMMENT = 30
    LINE_COMMENT = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "'let'", "')'", "'+'", "'-'", "'*'", "'/'", "'=='", "'!='", 
            "'<'", "'>'", "'<='", "'>='", "'not'", "'['", "','", "']'", 
            "'if'", "'then'", "'else'", "'print'", "'macro'", "'class'", 
            "'def'" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "INT", "BOOL", "STRING", "WS", "COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "IDENTIFIER", "INT", 
                  "BOOL", "STRING", "WS", "COMMENT", "LINE_COMMENT" ]

    grammarFileName = "Onion.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


